<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="LessCode.EFCore.StronglyTypedIdGenerator" #>

<#
bool isComparable = typeof(IComparable).IsAssignableFrom(CodeAnalysisHelper.ResolveTypeWithRoslyn(Model.DataType));
#>
using System;
using System.Linq.Expressions;

namespace <#=Model.NameSpace#>
{
    public readonly struct <#=Model.ClassName#>Id
    {
        public <#=Model.ClassName#>Id()
        {
            <#if(Model.DataType=="System.Guid"){  #>
            this.Value=Guid.NewGuid();   
            <#}#>
        }
        public <#=Model.ClassName#>Id(<#=Model.DataType#> value) => Value = value;
        public <#=Model.DataType#> Value { get; }

        public static Expression<Func<<#=Model.ClassName#>Id,<#=Model.DataType#>>> Converter1=v => v.Value;
        public static Expression<Func<<#=Model.DataType#>, <#=Model.ClassName#>Id>> Converter2=v => new <#=Model.ClassName#>Id(v);

        public override string ToString()
        {
            return Convert.ToString(Value);
        }

        public override int GetHashCode()
        {
            return this.Value.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if(obj is <#=Model.ClassName#>Id)
            {
                <#=Model.ClassName#>Id objId = (<#=Model.ClassName#>Id)obj;
                return this.Value==objId.Value;
            }
            return base.Equals(obj);
        }

        public static bool operator ==(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2) 
        {
            return c1.Equals(c2);
        }

        public static bool operator !=(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2) 
        {
           return !c1.Equals(c2);
        }

        <#if(isComparable){  #>
        public static bool operator >(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2)
        {
            return c1.Value>c2.Value;
        }

        public static bool operator <(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2)
        {
            return c1.Value < c2.Value;
        }

        public static bool operator >=(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2)
        {
            return c1.Value >= c2.Value;
        }

        public static bool operator <=(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2)
        {
            return c1.Value <= c2.Value;
        }  
        <#}#>
    }
}