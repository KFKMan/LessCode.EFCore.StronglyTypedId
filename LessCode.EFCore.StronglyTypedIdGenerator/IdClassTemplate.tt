<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="LessCode.EFCore.StronglyTypedIdGenerator" #>

<#
Type modelDataType = CodeAnalysisHelper.ResolveTypeFromName(Model.DataType);
#>
using System;
using System.Linq.Expressions;

namespace <#=Model.NameSpace#>
{
    public partial class <#=Model.ClassName#>Id : IComparable, IComparable<<#=Model.ClassName#>Id>,
		IEquatable<<#=Model.ClassName#>Id>
    {
        public <#=Model.ClassName#>Id()
        {
            <#if(modelDataType==typeof(Guid)){  #>
            this.Value=Guid.NewGuid();   
            <#}#>
        }
        public <#=Model.ClassName#>Id(<#=Model.DataType#> value) => Value = value;
        public <#=Model.DataType#> Value { get; }

        public static Expression<Func<<#=Model.ClassName#>Id,<#=Model.DataType#>>> Converter1=v => v.Value;
        public static Expression<Func<<#=Model.DataType#>, <#=Model.ClassName#>Id>> Converter2=v => new <#=Model.ClassName#>Id(v);

        public override string ToString()
        {
            return Convert.ToString(Value);
        }

        public override int GetHashCode()
        {
            return this.Value.GetHashCode();
        }

        public override bool Equals(object obj)
        {
            if(obj is <#=Model.ClassName#>Id entity)
            {
                return this.Equals(entity);
            }
            return base.Equals(obj);
        }

        public bool Equals(<#=Model.ClassName#>Id other)
		{
			return this.Value=other.Value;
		}

        public int CompareTo(<#=Model.ClassName#>Id other)
		{
			if (other == null){
				return 1; 
            }

            if(other.Value == null){
                if(this.Value == null){
                    return 0;
                }
                else{
                    return 1;
                }
            }

            if(this.Value == null){
                return -1;
            }
			return CompareTo(other.Value);
		}

        public int CompareTo(object obj)
        {
            if(obj is <#=Model.ClassName#>Id entity){
                return CompareTo(entity);
            }

            <# if(CodeAnalysisHelper.SupportsCompareToType(modelDataType,modelDataType) || CodeAnalysisHelper.SupportsCompare(modelDataType)){#>
                return this.Value.CompareTo(obj);
            <#} else {#>
                throw new NotSupportedException("Entity Type (<#=Model.DataType#>) doesn't support both of IComparable and IComparable<<#=Model.DataType#>>");
            <#}#>
        }

        <# if(CodeAnalysisHelper.SupportsBinaryOperator(modelDataType, ExpressionType.Equal)){#>
        public static bool operator ==(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2) 
        {
            if(c1 is null && c2 is null)
            {
                return true;
            }
            else if(c1 is null || c2 is null)
            {
                return false;
            }
            else
            {
                return c1.Equals(c2);
            }
        }
        <#}#>

        <# if(CodeAnalysisHelper.SupportsBinaryOperator(modelDataType, ExpressionType.NotEqual)){#>
        public static bool operator !=(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2) 
        {
            if(c1 is null && c2 is null)
            {
                return false;
            }
            else if(c1 is null || c2 is null)
            {
                return true;
            }
            else
            {
                return !c1.Equals(c2);
            }
        }
        <#}#>

        <# if(CodeAnalysisHelper.SupportsBinaryOperator(modelDataType, ExpressionType.GreaterThan)){#>
        public static bool operator >(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2)
        {
            if(c1 is null || c2 is null)
            {
                return false;
            }
            else
            {
                return c1.Value>c2.Value;
            }            
        }
        <#}#>

        <# if(CodeAnalysisHelper.SupportsBinaryOperator(modelDataType, ExpressionType.LessThan)){#>
        public static bool operator <(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2)
        {            
            if(c1 is null || c2 is null)
            {
                return false;
            }
            else
            {
                return c1.Value<c2.Value;
            }
        }
        <#}#>

        <# if(CodeAnalysisHelper.SupportsBinaryOperator(modelDataType, ExpressionType.GreaterThanOrEqual)){#>
        public static bool operator >=(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2)
        {
            if(c1 is null && c2 is null)
            {
                return true;
            }
            else if(c1 is null || c2 is null)
            {
                return false;
            }
            else
            {
                return c1.Value >= c2.Value;
            }            
        }
        <#}#>

        <# if(CodeAnalysisHelper.SupportsBinaryOperator(modelDataType, ExpressionType.LessThanOrEqual)){#>
        public static bool operator <=(<#=Model.ClassName#>Id c1, <#=Model.ClassName#>Id c2)
        {
            if(c1 is null && c2 is null)
            {
                return true;
            }
            else if(c1 is null || c2 is null)
            {
                return false;
            }
            else
            {
                return c1.Value <= c2.Value;
            }
        }  
        <#}#>
    }
}